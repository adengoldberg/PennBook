NETS 212 Final Project - Team 21

Team members:
-----------------------------------------------------------------------------------------------------------------------------------------------
Aden Goldberb (adengold)
Siddharth Kumar (siddk)
John Paul Young (johnyou)

Features implemented:
-----------------------------------------------------------------------------------------------------------------------------------------------
- chat (direct and group)
- profiles (updating its fields as well)
- signup/login/logout (password hashing & security)
- friend searching
- friendship visualization
- posts, status updates, and comments

List of source files included:
-----------------------------------------------------------------------------------------------------------------------------------------------
- chat.ejs
- comments.ejs
- editprofile.ejs
- main.ejs
- mapreduce.ejs
- otheruser.ejs
- profile.ejs
- signup.ejs
- visualize.ejs
- routes.js
- app.js
- config.js
- package.js

Academic integrity declaration: All code was written by members of the team and any external libararies used were approved on Piazza and are listed below.
External Libararies used: 
-----------------------------------------------------------------------------------------------------------------------------------------------
- async
- aws-sdk
- ejs
- express
- lru-cache
- bcrypt (for password hashing)
- body-parser
- dynamodb
- joi
- fs
- socket.io

Instructions for building and running the project (local):*
-----------------------------------------------------------------------------------------------------------------------------------------------
- Download zip file for our project folder & unzip into directory of your choice
- cd into the directory in the terminal. make sure you are running node version 8.10.0 (to ensure that all packages function properly). You can do this by ensuring you have nvm and calling: nvm use 8.10.0
  - To access nvm, you might need to run curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
  - It may be necessary to exit the terminal and then reenter and direct yourself to the app's location (e.g. the directory which shows app.js)
- Type node app and open your browser to localhost:8080


Instructions for building and running the project (EC2):
-----------------------------------------------------------------------------------------------------------------------------------------------
- Download zip file for our project folder & unzip into directory of your choice
- Launch an instance of EC2 such that the security groups allow you to listen to port:8080, as this is the port on which our app listens. Download/use an appropriate key for this instance
- Type ssh -i ~/<directory to your key>/login-key-name.pem ec2-user@<your-EC2-Instance-Public-IP>
- To access nvm, you might need to run curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
- Type: exit
- cd into the directory that has our unzipped project
- Type: scp -r -i ~/<directory to your key>/login-key-name.pem ec2-user@<your-EC2-Instance-Public-IP>:~
- Type ssh -i ~/<directory to your key>/login-key-name.pem ec2-user@<your-EC2-Instance-Public-IP>
- You should have the project available now. To make sure you have the correct files, make sure you are running node v8.10.0: 
  - Type: nvm use 8.10.0
- RUN THE APP: To run EC2 Instance, type: node app
  - To keep application running when not logged into the Instance, type: nohup node app & 
- KILL THE APP: control + C, the Terminate button in the AWS console


* Note that anythign in "</>" is 
* Note that you must change the AWS Keys in the config.json file within the project directory to match your own accoutn

Comments
-----------------------------------------------------------------------------------------------------------------------------------------------
- We attended office hours where a TA told us to implement friendships using an adjacency list in the profile page despite our concerns that this would not scale, particularly in the mapreduce. We implemented friendships this way, but were later advised (less than a day before our presentation) that this was a poor design choice, but so much of our implementation had already been built off of this decision that we could not retroactively go back and change it without restructuring significant portions of our application. We were then advised to leave a remark about why this choice was made. 
- We wrote a lot of CSS but did not get a chance to integrate fully
- Chat run in EC2 does not immediately render the new message using the emit statement, but it DOES record them to the database and upon reloading the data, all chats are displayed properly. We tracked this error all the way to the exact line where the message should be displayed. Upon investigating further we think this could be due to an incompatibility issue between our version of socket.io and EC2.
